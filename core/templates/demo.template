<!DOCTYPE html>
<html lang="en" ng-app="pmlApp">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>PML Report</title>
<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.5/angular.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
<style>
{{include_file('resources/slider/css/slider.css')}}
</style>

<style>
.row{
    overflow: hidden;
}

.result{
    //height: 30em;
    margin: 2em 1em;
}

[id*='chart-canvas-']{
    height: 50em !important;
    width: auto !important;
}

[id*='map-canvas-']{
    height: 45em;
    margin-bottom: 5em;
}

.slider-horizontal{
    width: 100% !important;
}

.shell-row{
    font-size: 1.5em;
    margin-bottom: 1em;
}

form .btn-default{
    width; 100%;
    display: block;
}

form button{
    margin-bottom: 1.5em !important;
    font-size: 1.5em !importan;
}

hr.faded {
    clear: both; 
    float: none; 
    width: 100%; 
    height: 2px;
    margin: 1.4em 0;
    border: none; 
    background: #ddd;
    background-image: -webkit-gradient(
    linear,
    left bottom,
    right bottom,
    color-stop(0, rgb(255,255,255)),
    color-stop(0.3, rgb(221,221,221)),
    color-stop(0.7, rgb(221,221,221)),
    color-stop(1, rgb(255,255,255))
    );
    background-image: -moz-linear-gradient(
    left center,
    rgb(255,255,255) 0%,
    rgb(221,221,221) 30%,
    rgb(221,221,221) 70%,
    rgb(255,255,255) 100%
    );
}


</style>
</head>
<body>
<nav class="navbar navbar-default" role="navigation">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="#">PML Demo Evaluation</a>
        </div>
    </div>
</nav>
<div class="main-container container-fluid">
    <form action="/" method="post" class="col-xs-12" ng-cloak>
        <div class="row" ng-controller="SingleOutCtrl" ng-init="shells = {{json.dumps(shells).replace('"',"'")}}">
            {% raw %}
            <div ng-repeat="shell in shells" class="col-xs-12 shell-row">
                <label class="col-xs-4 col-md-2">{{shell.name}}</label>
                <span class="col-xs-4 col-md-8">
                    <input type="text" class="slider" name="{{$index}}" ng-value="shell.weight" pml-slider/>
                </span>
                <span class="col-xs-2 col-md-1" >&nbsp;{{shell.weight | number}}</span>
                <span class="col-xs-2 col-md-1">
                    <a class="btn btn-default" ng-click="singleOut($index)">Solo</a>
                </span>
            </div>
            <div class="col-sm-10 col-sm-offset-1 col-md-6 col-md-offset-3">
                <button type="submit" class="btn btn-primary btn-block">Submit</button>
            </div>
            {% endraw %}
        </div>
    </form>
    {%for result in results%}
    <hr class="faded"/>
    <div class="row">
        {% for datum in result %}
        <div class="col-sm-6 col-md-4 col-lg-3">
            <div class="result">
                <img class="img-responsive img-rounded" src="img/{{datum.imageFilePath}}" alt="{{datum.meta()['id']}}"/>
                <dl>
                    <dt>Id</dt>
                    <dd>
                    {{datum.meta()['id']}}
                    </dd>
                    <dt>File</dt>
                    <dd>
                    {{datum.imageFilePath}}
                    </dd>
                    <dt>Views</dt>
                    <dd>
                    {{datum.meta()['views']}}
                    </dd>
                    <dt>Tags</dt>
                    <dd>
                    {% for tag in datum.meta()['tags'] %}
                    <span class="label label-default">{{tag.text}}</span>
                    {% endfor %}
                    </dd>
                </dl>
            </div>
        </div>
        {% endfor %}
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-6">
            <div id="map-canvas-{{loop.index0}}"></div>
            <script>
            function initialize{{loop.index0}}() {
                var mapOptions = {
                    zoom: 11,
                      center: new google.maps.LatLng(0.0,0.0)
                }

                var map = new google.maps.Map(document.getElementById('map-canvas-{{loop.index0}}'), mapOptions);

                var bounds = new google.maps.LatLngBounds();

                var b = null;
                var marker = null;
                var infoWindow = null;

                {%for datum in result%}
                {%if 'location' in datum.meta()%}
                b = new google.maps.LatLng({{datum.meta()['location']['latitude']}},{{datum.meta()['location']['longitude']}});
                bounds.extend(b);
                            //icon:"http://maps.google.com/mapfiles/ms/icons/green-dot.png",
                marker = new google.maps.Marker({
                            position:b,
                            icon: new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|00FF00",null,null,null, new google.maps.Size(42, 68)),
                            map:map,
                            title:"{{datum.meta()['id']}}"
                        });
                infoWindow = new google.maps.InfoWindow({
                        content:'<div><h1>{{datum.meta()["id"]}}</h1><div><img alt="{{datum.meta()["id"]}}" src="img/{{datum.imageFilePath}}"/></div></div>'
                        });
                google.maps.event.addListener(marker, 'click', function(infoWindow,marker) {
                            infoWindow.open(map,marker);
                          }.bind(undefined,infoWindow,marker));
                {%endif%}
                {%endfor%}
                {%for datum in notSelected[loop.index0]%}
                {%if 'location' in datum.meta()%}
                b = new google.maps.LatLng({{datum.meta()['location']['latitude']}},{{datum.meta()['location']['longitude']}});
                bounds.extend(b);
                marker = new google.maps.Marker({
                            position:b,
                            map:map,
                            title:"{{datum.meta()['id']}}"
                        });
                infoWindow = new google.maps.InfoWindow({
                        content:'<div><h1>{{datum.meta()["id"]}}</h1><div><img alt="{{datum.meta()["id"]}}" src="img/{{datum.imageFilePath}}"/></div></div>'
                        });
                google.maps.event.addListener(marker, 'click', function(infoWindow,marker) {
                            infoWindow.open(map,marker);
                          }.bind(undefined,infoWindow,marker));
                {%endif%}
                {%endfor%}
                map.fitBounds(bounds);
                map.setCenter(bounds.getCenter());
            }

            google.maps.event.addDomListener(window, 'load', initialize{{loop.index0}});

            </script> 
        </div>
        <div class="col-xs-12 col-sm-6">
            <canvas id="chart-canvas-{{loop.index0}}" width=1000 height=1000></canvas>
            <script>
            function initChart{{loop.index0}}(){
                var ctx = $("#chart-canvas-{{loop.index0}}").get(0).getContext("2d");
                var myChart = new Chart(ctx);
                var data = {
                    labels:[
                       {%for shell in shells%}
                            '{{shell.name}}',
                       {%endfor%}
                        ],
                    datasets:[
                        {
                            fillColor : "rgba(20,20,20,1)",
                            strokeColor : "rgba(20,20,20,1)",
                            pointColor : "rgba(20,20,20,1)",
                            data:[
                            {%for shellscore,shell in zip(shellscores[loop.index0],shells)%}
                                {{shell.weight*shellscore}},
                            {%endfor%}
                            ],
                        },
                    /*
                        {
                            data:[
                             {%for shell in shells%}
                                 {{shell.weight}},
                             {%endfor%}
                             ],
                        },
                        */
                        ],
                };
                var options = {
                    pointLabelFontSize: 28,
                    animationSteps: 20,
                };
                myChart.Radar(data,options);
            }
            $(document).ready(initChart{{loop.index0}});
            </script>
        </div>
    </div>
    {% endfor %}
</div>
<script>
{{include_file('resources/slider/js/bootstrap-slider.js')}}
</script>
<script>
{{include_file('resources/chart/js/chart.js')}}
</script>
<script>
angular.module('pmlApp', [])
.controller('SingleOutCtrl', ['$scope',function ($scope) {
        $scope.singleOut = function(ind){
            debugger;
            angular.forEach($scope.shells,function(shell,shellInd){
                if(shellInd == ind){
                    shell.weight = 1.0;
                }else{
                    shell.weight = 0.0;
                }
            });
            };
        }])
.directive('pmlSlider', [function () {
    return {
      restrict: 'A',
      scope: false,
      link: function(scope, iElement, iAttrs, controller){
            scope.expBase = 10;
          iElement.slider({
              min:0,
              max:1,
              step:0.01,
              value:scope.shell.weight,
              tooltip: 'hide',
          }).on('slide',function(ev){
                    scope.$apply(function(){
                            if(scope.shell.name == "GeoHotspotShell"){
                                scope.shell.weight = (Math.pow(scope.expBase,ev.value)-1)/(scope.expBase-1);
                            }else{
                                scope.shell.weight = ev.value;
                            }
                        });
                });
          scope.$watch('shell.weight',function(newValue){
                  var nval = newValue;
                if(scope.shell.name == "GeoHotspotShell"){
                    nval = Math.log((newValue*(scope.expBase-1))+1)/Math.log(scope.expBase);
                }
                var val = iElement.slider('getValue');
                if(val != nval){
                    iElement.slider('setValue',nval);
                }
              });
        }
    };
  }]);
</script>
</body>
</html>
